<?php

namespace App\Models;

use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Str;
class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($user){
            $user->activation_token=Str::random(10);
        });
    }


    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];


    public function gravatar($size ='100'){
        $hash=md5(strtolower(trim($this->attributes['email'])));
        return "https://avatars1.githubusercontent.com/u/22073042?s=400&u=229e3db9e1167c619dcff31bd7bd2f527942645c&v=4/$hash?s=$size";
    }
    public function statuses(){
        return $this->hasMany(Status::class);
    }


    public function feed(){
        $user_ids =$this->followings->pluck('id')->toArray();
        array_push($user_ids,$this->id);
        return Status::whereInt('user_id',$user_ids)
            ->with('user')
            ->orderBy('created_at','desc');
    }

    public function followers(){
        return $this->belongsToMany(User::class,'followers','user_id','follower_id');
    }
    public function followings(){
        return $this->belongsToMany(User::class,'followers','follower_id','user_id');
    }


    public function follow($user_ids){
        if (!is_array($user_ids)){
            $user_ids=compact('user_ids');
        }
        $this->followings()->sync($user_ids,false);
    }

    public function unfollow($user_ids){
        if (!is_array($user_ids)){
            $user_ids =compact('user_ids');
        }
        $this->followings()->detach($user_ids);
    }

    /**
     * @param $user_id
     * @return mixed
     * // 1. 返回的是一个 HasMany 对象
    $this->followings()
    // 2. 返回的是一个 Collection 集合
    $this->followings
    // 3. 第2个其实相当于这样
    $this->followings()->get()
    // 如果不需要条件直接使用 2 那样，写起来更短
     *
     */
    public function isFollowing($user_id){
        return $this->followings->contains($user_id);
    }

}
